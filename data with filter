import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from scipy.signal import butter, filtfilt  # For filtering (requires SciPy)

# Define the directory containing the CSV files
data_dir = "your/data/directory/"  # Replace with your actual directory path

# Get all CSV files in the directory
csv_files = glob.glob(data_dir + "*.csv")

# Define the column names for plotting (assuming same columns across files)
time_col = "time_column_name"  # Replace with your actual time column name
data_col = "data_column_name"  # Replace with your actual data column name

# Define the desired start and end positions for the time axis (replace with your values)
start_pos = 10  # Adjust this value for the starting position
end_pos = 20  # Adjust this value for the ending position

# Define filtering parameters (adjust as needed)
# - lower_cutoff: Minimum frequency to keep (in Hz)
# - higher_cutoff: Maximum frequency to keep (in Hz)
# - sample_rate: Sampling rate of the data (in Hz) - crucial for frequency conversion
lower_cutoff = 2  # Adjust this value for low-pass filtering
higher_cutoff = 10  # Adjust this value for high-pass filtering (or None for low-pass)
sample_rate = 100  # Adjust this value for your data's sampling rate

# List to store labels for each plot
plot_labels = []

# Loop through each CSV file
for file in csv_files:
  # Read the CSV file into a DataFrame
  df = pd.read_csv(file)
  
  # Extract data for plotting and filtering
  time_data = df[time_col]
  data_to_filter = df[data_col]
  
  # Filter data within the desired time range
  filtered_time_data = time_data[ (time_data >= start_pos) & (time_data <= end_pos) ]
  data_to_filter = data_to_filter[ (time_data >= start_pos) & (time_data <= end_pos) ]
  
  # Convert time data to numpy array for frequency domain operations
  time_data_np = np.asarray(filtered_time_data)
  data_to_filter_np = np.asarray(data_to_filter)

  # Design a band-pass filter (adjust for low-pass or high-pass as needed)
  nyq_freq = 0.5 * sample_rate  # Nyquist frequency
  lowcut = lower_cutoff / nyq_freq
  highcut = higher_cutoff / nyq_freq if higher_cutoff else None  # None for low-pass
  b, a = butter(2, [lowcut, highcut], btype='band')
  
  # Apply the filter to the data
  filtered_data = filtfilt(b, a, data_to_filter_np)
  
  # Plot the filtered data (separate lines for each file)
  plt.plot(filtered_time_data, filtered_data, label=file.split("/")[-1])  # Use filename as label
  plot_labels.append(file.split("/")[-1])  # Extract filename for legend

# Add labels and title for the plot 
plt.xlabel(time_col)
plt.ylabel(data_col)
plt.title(f"Filtered Data from Multiple CSV Files (Time: {start_pos} to {end_pos})")

# Add legend to differentiate between files
plt.legend(plot_labels)

# Display the plot
plt.show()
