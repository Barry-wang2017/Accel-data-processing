import os
import csv
import matplotlib.pyplot as plt
import numpy as np
import warnings

def process_acceleration_data(
    folder_path, start_row, start_col, x_col, y_cols, 
    colors=None, line_width=2, font_size=12, figsize=(12, 8), dpi=100,
    x_range=None, y_range=None, 
    marker_font_size=10, marker_font_weight='normal',
    curve_labels=None, output_filename='acceleration_plot.png'
):
    # Get all CSV files in the folder
    csv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]
    
    plt.figure(figsize=figsize, dpi=dpi)
    plt.rcParams.update({'font.size': font_size})
    
    for i, file in enumerate(csv_files):
        file_path = os.path.join(folder_path, file)
        
        with open(file_path, 'r') as csvfile:
            csvreader = csv.reader(csvfile)
            
            # Skip rows until start_row
            for _ in range(start_row):
                next(csvreader)
            
            data = []
            for row_index, row in enumerate(csvreader, start=start_row):
                try:
                    # Start from start_col and convert to float, skipping empty cells
                    processed_row = [float(value) if value.strip() else np.nan for value in row[start_col:]]
                    if any(np.isnan(processed_row)):
                        warnings.warn(f"Empty cell(s) found in file {file}, row {row_index + 1}. Replacing with NaN.")
                    data.append(processed_row)
                except ValueError as e:
                    warnings.warn(f"Error processing row {row_index + 1} in file {file}: {e}")
                    continue
        
        if not data:
            warnings.warn(f"No valid data found in file {file}. Skipping this file.")
            continue

        data = np.array(data)
        x = data[:, x_col - start_col]
        
        for j, y_col in enumerate(y_cols):
            y = data[:, y_col - start_col]
            
            # Remove NaN values
            mask = ~np.isnan(x) & ~np.isnan(y)
            x_clean = x[mask]
            y_clean = y[mask]
            
            if len(x_clean) == 0:
                warnings.warn(f"No valid data for column {y_col} in file {file}. Skipping this column.")
                continue

            color = colors[i * len(y_cols) + j] if colors else None
            label = curve_labels[i * len(y_cols) + j] if curve_labels else f'{file} - Column {y_col}'
            
            plt.plot(x_clean, y_clean, label=label, color=color, linewidth=line_width)
            
            # Find and mark max and min values
            max_idx = np.argmax(y_clean)
            min_idx = np.argmin(y_clean)
            
            plt.plot(x_clean[max_idx], y_clean[max_idx], 'ro')
            plt.text(x_clean[max_idx], y_clean[max_idx], f'Max: {y_clean[max_idx]:.2f}', 
                     fontsize=marker_font_size, fontweight=marker_font_weight,
                     verticalalignment='bottom')
            
            plt.plot(x_clean[min_idx], y_clean[min_idx], 'bo')
            plt.text(x_clean[min_idx], y_clean[min_idx], f'Min: {y_clean[min_idx]:.2f}', 
                     fontsize=marker_font_size, fontweight=marker_font_weight,
                     verticalalignment='top')
    
    plt.xlabel(f'Time(sec)')
    plt.ylabel('Acceleration(g)')
    plt.title('Acceleration_Sensor2_Z')
    plt.legend()
    plt.grid(True)
    
    # Set X-axis range if provided
    if x_range:
        plt.xlim(x_range)
    
    # Set Y-axis range if provided
    if y_range:
        plt.ylim(y_range)
    
    plt.tight_layout()
    
    # Save the plot as an image file
    output_path = os.path.join(folder_path, output_filename)
    plt.savefig(output_path, dpi=dpi)
    print(f"Plot saved as: {output_path}")
    
    plt.show()

# Example usage remains the same as before
folder_path = '/Users/barrywang/Documents/Python_work/iphone/V53/V53/20C'
start_row = 2
start_col = 2
x_col = 2
y_cols = [3]


custom_colors = ['red', 'blue', 'green', 'orange', 'purple', 'cyan']
line_width = 2
font_size = 14
figsize = (16, 10)
dpi = 150

x_axis_range = (0.009, 0.012)
y_axis_range = (-1000, 10000)

marker_font_size = 6
marker_font_weight = 'bold'

curve_labels = ['config1', 'config2', 'config3', 'config4', 'config5', 'config6']

output_filename = 'Force_plot.png'

process_acceleration_data(
    folder_path, start_row, start_col, x_col, y_cols, 
    colors=custom_colors, line_width=line_width, font_size=font_size, 
    figsize=figsize, dpi=dpi,
    x_range=x_axis_range, y_range=y_axis_range,
    marker_font_size=marker_font_size, marker_font_weight=marker_font_weight,
    curve_labels=curve_labels, output_filename=output_filename
)
